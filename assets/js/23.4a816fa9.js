(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{526:function(e,a,t){"use strict";t.r(a);var r=t(38),c=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"regular-expressions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regular-expressions"}},[e._v("#")]),e._v(" Regular Expressions")]),e._v(" "),t("YouTube",{attrs:{title:"Intro to Reg Exp",url:"https://www.youtube.com/embed/zPeEU9dP83M"}}),e._v(" "),t("YouTube",{attrs:{title:"Using Reg Exp",url:"https://www.youtube.com/embed/kUMA1d1Sqto"}}),e._v(" "),t("p",[t("RouterLink",{attrs:{to:"/assignments/hybrid/"}},[e._v("Back to Hybrid exercises")])],1),e._v(" "),t("h2",{attrs:{id:"reference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[e._v("#")]),e._v(" Reference")]),e._v(" "),t("p",[t("code",[e._v("-")]),e._v(" 0 or more matches")]),e._v(" "),t("p",[t("code",[e._v("*")]),e._v(" 1 or more matches")]),e._v(" "),t("p",[t("code",[e._v("?")]),e._v(" 0 or 1 match")]),e._v(" "),t("p",[t("code",[e._v("^")]),e._v(" matches the start of the string or line")]),e._v(" "),t("p",[t("code",[e._v("\\")]),e._v(" signifies an escape sequence")]),e._v(" "),t("p",[t("code",[e._v("\\$")]),e._v(" matches the end of the string or line")]),e._v(" "),t("p",[t("code",[e._v(".")]),e._v(" matches any single character except newline")]),e._v(" "),t("p",[t("code",[e._v("( )")]),e._v(" capturing group. Save to reuse later")]),e._v(" "),t("p",[t("code",[e._v("|")]),e._v(" used as a logic OR inside a capturing group")]),e._v(" "),t("p",[t("code",[e._v("[abc]")]),e._v(" character set. Matches one of the things in the brackets")]),e._v(" "),t("p",[t("code",[e._v("[^abc]")]),e._v(" Negated character set. Matches anything except...")]),e._v(" "),t("p",[t("code",[e._v("[a-zA-Z]")]),e._v(" all upper and lowercase letters. You can specify any range.")]),e._v(" "),t("p",[t("code",[e._v("{1}")]),e._v(" exact number of matches. Comes after a set or group.")]),e._v(" "),t("p",[t("code",[e._v("{1,5}")]),e._v(" inclusive range for number of matches")]),e._v(" "),t("p",[t("code",[e._v("{1,}")]),e._v(" minimum number of matches")]),e._v(" "),t("p",[t("code",[e._v("{,5}")]),e._v(" maximum number of matches")]),e._v(" "),t("p",[t("code",[e._v("\\s")]),e._v(" any whitespace character")]),e._v(" "),t("p",[t("code",[e._v("\\S")]),e._v(" any NON whitespace character")]),e._v(" "),t("p",[t("code",[e._v("\\d")]),e._v(" any digit. Same as "),t("code",[e._v("[0-9]")])]),e._v(" "),t("p",[t("code",[e._v("\\D")]),e._v(" any NON digit")]),e._v(" "),t("p",[t("code",[e._v("\\w")]),e._v(" any word character. Same as "),t("code",[e._v("[a-zA-Z0-9_]")])]),e._v(" "),t("p",[t("code",[e._v("\\W")]),e._v(" any NON word character. Same as "),t("code",[e._v("[^a-za-z0-9_]")])]),e._v(" "),t("p",[t("code",[e._v("\\b")]),e._v(" word boundary")]),e._v(" "),t("p",[t("code",[e._v("\\B")]),e._v(" NON word boundary")]),e._v(" "),t("p",[t("code",[e._v("[\\b]")]),e._v(" - escape sequence for a backspace character")]),e._v(" "),t("p",[t("code",[e._v("\\u0404")]),e._v(" - 4 digit unicode hex value for a character")])],1)}),[],!1,null,null,null);a.default=c.exports}}]);